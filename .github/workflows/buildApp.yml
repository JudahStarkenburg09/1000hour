name: Build APK App - Patch Method
on: workflow_dispatch

jobs:
  build-android:
    name: Build for Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Buildozer dependencies
        run: |
          sudo apt update
          sudo apt install -y git zip unzip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo6 cmake libffi-dev libssl-dev automake libtool-bin
          python -m pip install --upgrade pip
          pip install Cython==0.29.33
          pip install buildozer

      - name: Create buildozer.spec if not exists
        run: |
          if [ ! -f buildozer.spec ]; then
            cat > buildozer.spec << 'EOF'
[app]
title = 1000 Hour Challenge
package.name = thousandhour
package.domain = org.thousandhour
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,json
requirements = python3==3.10.8,kivy==2.2.1,plyer,pyjnius,pillow
orientation = portrait

[buildozer]
log_level = 2
warn_on_root = 1

# Custom source folders for SDL2 libraries
requirements.source.sdl2_image = https://github.com/libsdl-org/SDL_image/releases/download/release-2.6.3/SDL2_image-2.6.3.tar.gz
requirements.source.sdl2_mixer = https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.3/SDL2_mixer-2.6.3.tar.gz
requirements.source.sdl2_ttf = https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-2.20.2.tar.gz

# Android specific
android.api = 33
android.minapi = 21
android.ndk = 25b
android.archs = arm64-v8a, armeabi-v7a
android.allow_backup = True
android.accept_sdk_license = True

# Python for android
p4a.bootstrap = sdl2
p4a.branch = develop
p4a.hook = .buildozer/hooks/before_recipe_build.py
EOF
          fi

      - name: Create libffi patch directory
        run: |
          mkdir -p patches

      - name: Create libffi patch
        run: |
          cat > patches/libffi_fix.patch << 'EOF'
          --- a/configure.ac
          +++ b/configure.ac
          @@ -1,5 +1,15 @@
           dnl Process this with autoconf to create configure
           
          +dnl Define LT_SYS_SYMBOL_USCORE macro if it's not already defined
          +m4_ifndef([LT_SYS_SYMBOL_USCORE],
          +[AC_DEFUN([LT_SYS_SYMBOL_USCORE],
          +[AC_CACHE_CHECK([for _ prefix in compiled symbols],
          +  [lt_cv_sys_symbol_underscore],
          +  [lt_cv_sys_symbol_underscore=no
          +  cat > conftest.$ac_ext <<_LT_EOF
          +  void nm_test_func(){}
          +  _LT_EOF
          +  ])])])
          +
           AC_INIT([libffi], [3.3-rc0], [http://github.com/libffi/libffi/issues])
           AC_CONFIG_HEADERS([fficonfig.h])
           
          @@ -214,6 +224,7 @@
           
           if test x$TARGET = xX86_64; then
          +  LT_SYS_SYMBOL_USCORE
             SYMBOL_PREFIX=
           fi
           
          EOF

      - name: Create hooks directory
        run: |
          mkdir -p .buildozer/hooks

      - name: Create hook script
        run: |
          cat > .buildozer/hooks/before_recipe_build.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import subprocess
          import logging

          def before_recipe_build(recipe, arch):
              # Set up logging
              logging.basicConfig(level=logging.INFO)
              logger = logging.getLogger('before_recipe_build')
              
              # Only patch libffi
              if recipe.name == 'libffi':
                  logger.info(f"Patching libffi for {arch.arch}")
                  patch_path = os.path.join(os.getcwd(), 'patches', 'libffi_fix.patch')
                  recipe_dir = recipe.get_build_dir(arch.arch)
                  
                  if os.path.exists(patch_path) and os.path.exists(recipe_dir):
                      # Apply the patch
                      logger.info(f"Applying patch from {patch_path} to {recipe_dir}")
                      result = subprocess.run(
                          f'cd {recipe_dir} && patch -p1 < {patch_path}',
                          shell=True,
                          capture_output=True,
                          text=True
                      )
                      logger.info(f"Patch output: {result.stdout}")
                      if result.stderr:
                          logger.warning(f"Patch errors: {result.stderr}")
                      
                      # Create m4 directory if it doesn't exist
                      m4_dir = os.path.join(recipe_dir, 'm4')
                      os.makedirs(m4_dir, exist_ok=True)
                      
                      # Create pattern_allow.m4 file
                      pattern_file = os.path.join(m4_dir, 'pattern_allow.m4')
                      with open(pattern_file, 'w') as f:
                          f.write('m4_pattern_allow([LT_SYS_SYMBOL_USCORE])\n')
                      logger.info(f"Created {pattern_file}")
                      
                      # Run autoreconf
                      logger.info("Running autoreconf -vfi")
                      result = subprocess.run(
                          f'cd {recipe_dir} && autoreconf -vfi',
                          shell=True,
                          capture_output=True,
                          text=True
                      )
                      logger.info(f"Autoreconf output: {result.stdout}")
                      if result.stderr:
                          logger.warning(f"Autoreconf errors: {result.stderr}")
          EOF

      - name: Make hook script executable
        run: chmod +x .buildozer/hooks/before_recipe_build.py

      - name: Update buildozer.spec to use hook
        run: |
          if ! grep -q "^p4a.hook =" buildozer.spec; then
            echo "p4a.hook = .buildozer/hooks/before_recipe_build.py" >> buildozer.spec
          else
            sed -i 's|^p4a.hook =.*|p4a.hook = .buildozer/hooks/before_recipe_build.py|g' buildozer.spec
          fi

      - name: Build with Buildozer
        run: |
          mkdir -p ~/.android
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > ~/.android/repositories.cfg
          
          export ANDROIDNDK="/usr/local/lib/android/sdk/ndk/25.2.9519653"
          export ANDROIDNDK_HOME="/usr/local/lib/android/sdk/ndk/25.2.9519653"
          
          # Clean any previous build
          buildozer clean
          
          # Build with verbose output
          buildozer -v android debug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-package
          path: bin/*.apk
          if-no-files-found: warn
